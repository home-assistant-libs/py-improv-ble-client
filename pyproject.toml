[build-system]
requires = ["setuptools~=65.6", "wheel~=0.37.1"]
build-backend = "setuptools.build_meta"

[project]
name         = "py-improv-ble-client"
version      = "1.0.0"
license      = {text = "MIT"}
description  = "API to provision devices which implement Improv via BLE"
readme       = "README.md"
requires-python = ">=3.11.0"

[project.urls]
"Homepage" = "https://github.com/homeassistant-libs/py-improv-ble-client"

[tool.setuptools]
platforms = ["any"]
zip-safe  = true
include-package-data = true

[tool.setuptools.packages.find]
include = ["improv_ble_client*"]

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.black]
target-version = ["py311"]
extend-exclude = "/generated/"

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
known_first_party = [
    "improv_ble_client",
    "tests",
]
forced_separate = [
    "tests",
]
combine_as_imports = true

[tool.pylint.MAIN]
py-version = "3.11"
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
jobs = 2
init-hook = """\
    from pathlib import Path; \
    import sys; \

    from pylint.config import find_default_config_files; \

    sys.path.append( \
        str(Path(next(find_default_config_files())).parent.joinpath('pylint/plugins'))
    ) \
    """
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
    "_CMD_T",
]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
disable = [
    "format",
    "cyclic-import",
    "duplicate-code",
    "locally-disabled",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
]
enable = [
    "useless-suppression",
    "use-symbolic-message-instead",
]
